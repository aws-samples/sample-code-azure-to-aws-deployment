Description: >-
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a NAT gateways and default routes for them in the private subnets.
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: bg-sample
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  AmiID:
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: The ID of the AMI.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  WebServerCapacity:
    Default: '1'
    Description: The initial number of WebServer instances
    Type: Number
    MinValue: '1'
    MaxValue: '3'
    ConstraintDescription: must be between 1 and 3 EC2 instances.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.
      
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "This is for demo purpose, VPC flow log has not been enabled to minimize cost"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ2)'
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W52
            reason: "This is for demo purpose. Access logging is not enabled to prevent additional charges"
    Properties:
      Subnets:
       - Ref: PublicSubnet1
       - Ref: PublicSubnet2
      SecurityGroups:
       - Ref: ALBSecurityGroup
      # LoadBalancerAttributes:
      #   - Key: access_logs.s3.enabled
      #     Value: 'true'
      #   - Key: access_logs.s3.bucket
      #     Value: s3_bucket_name
      #   - Key: access_logs.s3.prefix
      #     Value: myalb-logs
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: "This is for demo purpose. HTTPS listener protocol is skipped intentionally"
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: '30'
      - Key: deregistration_delay.timeout_seconds
        Value: '30'  
        
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplate
        Version: !GetAtt Ec2InstanceLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: !Ref WebServerCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !Ref WebServerCapacity
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        
        
  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment1: Configure the bootstrap helpers to install the Apache Web Server and Ruby
      Comment2: The sample website content is downloaded from the CodeDeploy Sample
        zip file https://docs.aws.amazon.com/codedeploy/latest/userguide/tutorials-github-upload-sample-revision.html
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              ruby: []
          files:
            "/var/www/html/index.html":
              content: !Sub |
                <html>
                <head>
                <title>HELLO AWS WORLD</title>
                <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
                </head>
                <body>
                <h1>Welcome to the GREEN PHP Sample Application</h1>
                <p/>
                </body>
                </html>
              mode: '000600'
              owner: apache
              group: apache
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2InstanceLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --role ${CodeDeployRole}
                runas=root
              mode: '000400'
              owner: root
              group: root
            "/home/ec2-user/install":
              source: !Sub "https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install"
              mode: '000755'
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              codedeploy-agent:
                enabled: "true"
                ensureRunning: "true"
          commands:
            00-install-agent:
              command: "./install auto"
              cwd: "/home/ec2-user/" 
            01_enable_httpd:
              command: systemctl enable httpd
            02_start_httpd:
              command: systemctl start httpd              
            03-cfn-signal:
              command: !Sub |
                 /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
    Properties:
     LaunchTemplateData:
        SecurityGroupIds:
         - !GetAtt WebServerSecurityGroup.GroupId
        InstanceInitiatedShutdownBehavior: terminate
        ImageId: !Ref AmiID
        IamInstanceProfile: 
          Arn: {"Fn::GetAtt" : ["CodeDeployInstanceProfile", "Arn"] }  
        InstanceType: !Ref InstanceType
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --role ${CodeDeployRole}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region} --role ${CodeDeployRole}
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "This is a public facing ELB and ingress from the internet should be permitted."
          - id: W5
            reason: "This is a public facing ELB and ingress from the internet should be permitted."
          - id: W36
            reason: "This is a public facing ELB and egress from the internet should be permitted."  
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0        
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
      VpcId:
        Ref: VPC    
  ALBSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W9
            reason: "This is a public facing ELB and ingress from the internet should be permitted."
          - id: W2
            reason: "This is a public facing ELB and ingress from the internet should be permitted."
          - id: W40
            reason: "This is a public facing ELB and ingress from the internet should be permitted."
          - id: W5
            reason: "This is a public facing ELB and egress from the internet should be permitted."
          - id: W36
            reason: "This is a public facing ELB and egress from the internet should be permitted."     
     Properties:
      GroupDescription: Enable HTTP access for external end users via port 80 
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: '0.0.0.0/0' 
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0           
      VpcId:
        Ref: VPC
  CodeDeployInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: CodeDeployRole
  CodeDeployRole:
    Type: AWS::IAM::Role
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W44
            reason: "PowerUserAccess policy is attached for demo purpose"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'


##### Deployment Pipeline resources from here ###################################
      
  MyApplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: aws-toolkit-for-azure-devops
 
  CustomServiceRole:
    Type: 'AWS::IAM::Role'
    Metadata:
       cfn_nag:
        rules_to_suppress:
          - id: W44
            reason: "PowerUserAccess policy is attached for demo purpose"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - codepipeline.amazonaws.com
              - codedeploy.amazonaws.com
              - lambda.amazonaws.com
              - codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'

  CreateDeploymentGroup:
        Type: Custom::CreateDeploymentGroup
        DependsOn: MyApplication
        Properties:
            ServiceToken: !GetAtt Function.Arn
            serviceroleARN: !GetAtt CustomServiceRole.Arn
            ApplicationName: !Ref MyApplication
            DeploymentGroupName: 'my-sample-bg-deployment-group'
            AutoScalingGroupName: !Ref WebServerGroup
            TargetGroupName: !GetAtt ALBTargetGroup.TargetGroupName 
            
  Function:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "This function is not used for any privileged actions"
          - id: W89
            reason: "This function is not used for any privileged actions"
    Properties:
      Code:
        ZipFile: |
            import boto3
            import json
            import time
            import random
            import urllib.request
            from botocore.exceptions import ClientError

            codedeploy = boto3.client('codedeploy')
            asg = boto3.client('autoscaling')
            def main(event, context):
              print("Recieved Event: {}".format(json.dumps(event)))
              codedeployserviceRole_ARN = event['ResourceProperties']['serviceroleARN']
              app_name = event['ResourceProperties']['ApplicationName']
              deployment_group_name = event['ResourceProperties']['DeploymentGroupName']
              asg_group_name = event['ResourceProperties']['AutoScalingGroupName']
              target_group_name = event['ResourceProperties']['TargetGroupName']
              try:
                  if event['RequestType'] == 'Create':
                      print("Recieved Create Event...")
                      response = create_action(app_name, deployment_group_name, codedeployserviceRole_ARN, asg_group_name, target_group_name)
                      sendResponse(event, context, response['deploymentGroupId'], 'SUCCESS', {})
                  elif event['RequestType'] == 'Delete':
                      print("Recieved Delete Event...")
                      try:
                        deployment_group_detail = codedeploy.get_deployment_group(applicationName=app_name,deploymentGroupName=deployment_group_name)
                        list_deploy_detail = codedeploy.list_deployments(applicationName=app_name,deploymentGroupName=deployment_group_name,includeOnlyStatuses=['Failed','Succeeded','Stopped'])
                        i = 0
                        for deployments in list_deploy_detail:
                          depid = list_deploy_detail['deployments'][i]
                          deploy_detail = codedeploy.get_deployment(deploymentId=depid)
                          asgname = deploy_detail['deploymentInfo']['targetInstances']['autoScalingGroups'][0]
                          print("Deleting Auto Scaling Group")
                          asg.delete_auto_scaling_group(AutoScalingGroupName=asgname,ForceDelete=True)  
                          i +=1     
                      except IndexError:
                          print("nothing to delete")                         
                      deployment_group_id = deployment_group_detail['deploymentGroupInfo']['deploymentGroupId']
                      response = delete_action(app_name, deployment_group_name)
                      sendResponse(event, context, deployment_group_id , "SUCCESS", response)
              except ClientError as e:
                  if e.response['Error']['Code'] == 'ThrottlingException':
                      count = 2
                      attempts = 0
                      while attempts < count:
                          print("Retrying Function Execution....")
                          time.sleep(random.expovariate(1))
                          main(event,context)
                          attempts += 1
                  elif e.response['Error']['Code'] == 'DeploymentGroupDoesNotExistException':	
                      sendResponse(event,context,'success',"SUCCESS",e.response)
                  elif e.response['Error']['Code'] == 'ValidationError':	
                      sendResponse(event,context,'success',"SUCCESS",e.response)
                  elif e.response['Error']['Code'] == 'ResourceInUse':	
                      sendResponse(event,context,'success',"SUCCESS",e.response)                      
                  else:
                      print("printing error")
                      sendResponse(event,context,'failed',"FAILED",e.response)
                  
            def create_action(app_name, deployment_group_name, codedeployserviceRole_ARN, asg_group_name, target_group_name):
              response = codedeploy.create_deployment_group(
                applicationName=app_name,
                deploymentGroupName=deployment_group_name,
                deploymentConfigName='CodeDeployDefault.AllAtOnce',
                autoScalingGroups=[
                    asg_group_name,
                ],
                serviceRoleArn=codedeployserviceRole_ARN,
                autoRollbackConfiguration={
                    'enabled': True,
                    'events': [
                        'DEPLOYMENT_FAILURE',
                    ]
                },
                deploymentStyle={
                    'deploymentType': 'BLUE_GREEN',
                    'deploymentOption': 'WITH_TRAFFIC_CONTROL'
                },
                blueGreenDeploymentConfiguration={
                    'terminateBlueInstancesOnDeploymentSuccess': {
                        'action': 'TERMINATE',
                        'terminationWaitTimeInMinutes': 5
                    },
                    'deploymentReadyOption': {
                        'actionOnTimeout': 'CONTINUE_DEPLOYMENT',
                        'waitTimeInMinutes': 0
                    },
                    'greenFleetProvisioningOption': {
                        'action': 'COPY_AUTO_SCALING_GROUP'
                    }
                },
                loadBalancerInfo={
                    'targetGroupInfoList': [
                        {
                            'name': target_group_name
                        },
                    ]
                })
              return response

            def delete_action(app_name, deployment_group_name):
               print("Deleting CodeDeploy Deployment Group")
               response = codedeploy.delete_deployment_group(applicationName=app_name,deploymentGroupName=deployment_group_name)
               return  response
            def sendResponse(event, context, physicalid, responseStatus, responseData):
              responseBody = {'Status': responseStatus,
                              'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                              'PhysicalResourceId': physicalid,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'NoEcho': "true",
                              'Data': responseData}
              print('RESPONSE BODY:n' + json.dumps(responseBody))
              responseUrl = event['ResponseURL']
              json_responseBody = json.dumps(responseBody).encode("utf-8")
              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }
              try:
               print("sending response")
               req = urllib.request.Request(responseUrl, data=json_responseBody, headers=headers, method="PUT")
               response = urllib.request.urlopen(req)
               print(f'Response status: {response.status}')
              except Exception as e:
                    print("send(..) failed executing requests.put(..): " + str(e)) 
      Description: Custom Resource - Create CodeDeploy Deployment Group
      Handler: index.main
      ReservedConcurrentExecutions: 2
      MemorySize: 128
      Role: !GetAtt CustomServiceRole.Arn
      Runtime: python3.12
      Timeout: 120

      
Outputs:    
  WebsiteURL:
    Description: URL for newly created Website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName